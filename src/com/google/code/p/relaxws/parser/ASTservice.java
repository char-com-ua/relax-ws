/* Generated By:JJTree: Do not edit this line. ASTservice.java */

package com.google.code.p.relaxws.parser;

import com.google.code.p.relaxws.parser.SimpleNode;
import com.google.code.p.relaxws.parser.RelaxWizParser;

import java.util.LinkedHashMap;
import java.util.ArrayList;
import java.util.Iterator;

public class ASTservice extends SimpleNode {

    private String name;
    //default namespace
    private String namespace=null;
    private String documentation=null;
    //additional namespaces
    private LinkedHashMap<String,String> nsMap = new LinkedHashMap();
    //port set
    private LinkedHashMap<String,ASTportDecl> portMap = new LinkedHashMap();
    //options
    private MVMapOptions opts = new MVMapOptions();
    //endpoints
    private ArrayList<ASTepDecl> eps = new ArrayList();
    

    public ASTservice(int id) {
        super(id);
    }

    public ASTservice(RelaxWizParser p, int id) {
        super(p, id);
    }
    
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
        if(this.documentation==null)documentation=""+name+" service";
        if(this.namespace==null)setNamespace("http://tempuri.org/" + name);
    }


    //set default service namespace
    public void setNamespace(String namespace) {
        this.namespace = namespace;
        setNamespace("tns",namespace);
    }
    //returns default namespace
    public String getNamespace() {
        return namespace;
    }

    //set custom service namespace
    public void setNamespace(String prefix,String uri) {
    	String old=nsMap.get(prefix);
    	if(old!=null && !old.equals(uri))throw new RuntimeException("prefix: `"+prefix+"` already used for namespace: `"+old+"`. new value: `"+uri+"`");
    	nsMap.put(prefix,uri);
    }
	//returns custom namespaces
    public LinkedHashMap<String,String> getNamespaces() {
        return nsMap;
    }
    

    //set option
    public void setOption(String key,String value) {
    	opts.setValue(key,value);
    }
    
    public String getOption(String key) {
    	return opts.getValue(key);
    }
    
    public void addEndpoint(ASTepDecl ep){
    	//validate
    	for(Iterator<String> i=ep.opt().getValues("interface").iterator();i.hasNext();){
    		String port = i.next();
    		if( !portMap.containsKey( port ) )throw new RuntimeException("The interface `"+port+"` required by the endpoint `"+ep.getAddress()+"` not defined.");
    	}
    	//add
    	eps.add(ep);
    }
    
    public ArrayList<ASTepDecl> getEndpoints(){
    	return eps;
    }
    
    public void addPort(String name, ASTportDecl port){
    	if(name==null || name.length()==0)name=this.name+"Port";
    	if(portMap.containsKey(name))throw new RuntimeException("The port with name `"+name+"` already defined. Please rename one.");
    	port.setName(name);
    	portMap.put(name,port);
    }
    
    public java.util.Collection<ASTportDecl> getPorts(){
    	return (java.util.Collection<ASTportDecl>) portMap.values();
    }
    
    public int getPortCount(){
    	return portMap.size();
    }
    
    public ASTportDecl getPort(String name){
    	return portMap.get(name);
    }

    public String getDocumentation() {
        return documentation;
    }

    public void setDocumentation(String documentation) {
    	if(documentation.length()>0)this.documentation = documentation;
    }
}
