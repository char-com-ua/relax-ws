/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. RelaxWiz.jj */
/*@egen*//*
 * Copyright 2008 Jason Sando
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

options {
              
   IGNORE_CASE=false;
   STATIC=false;
   UNICODE_INPUT=true;
}

PARSER_BEGIN (RelaxWizParser)
package com.google.code.p.relaxws.parser;

import java.io.*;
import java.util.*;

public class RelaxWizParser/*@bgen(jjtree)*/implements RelaxWizParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTRelaxWizParserState jjtree = new JJTRelaxWizParserState();

/*@egen*/

    private StringBuffer rncBuffer = new StringBuffer ();

    public static void main (String[] args) throws ParseException, IOException {
        if (args.length == 0) {
            System.out.println ("Usage:  RelaxWizParser inputfile");
            System.exit (1);
        }


        BufferedReader rdr = new BufferedReader (new FileReader (args[0]));
        RelaxWizParser p = new RelaxWizParser (rdr);
        ASTservice tree = p.service ();
        tree.dump ("\t");
    }

    public String getAllRnc() {
        return rncBuffer.toString();
    }
}

PARSER_END (RelaxWizParser)

/*
 * Whitespace
 */
<*> SKIP :
{
      " "
    | "\t"
    | "\r"
    | "\n"
    | "\r\n"
}

/*
 * Keywords
 */
<*> TOKEN :
{
        <NAMESPACE: "namespace">
    |   <SERVICE:   "service">
    |   <PORT:      "port">
    |   <OPERATION: "operation">
    |   <IN:        "in">
    |   <OUT:       "out">
    |   <FAULT:     "fault">
    |   <TYPES:     "types">
}

/*
 * Operators
 */
<*> TOKEN :
{
      <LBRACE:      "{">
    | <RBRACE:      "}">
}

/*
 * Identifiers
 */
<*> TOKEN :
{
        <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | <SYMBOL>)*>
    |   <#LETTER: "_" | "$" | ["a"-"z","A"-"Z"]>
    |   <#DIGIT: ["0"-"9"]>
    |   <#SYMBOL: [":","/",".","-"]>
}

SPECIAL_TOKEN: /* COMMENTS */
{
     <TRAILING_COMMENT: "#" (~["\n","\r"])* >
}

ASTservice service () :
{/*@bgen(jjtree) service */
    ASTservice jjtn000 = new ASTservice(this, JJTSERVICE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) service */
    try {
/*@egen*/
    (<NAMESPACE> t=<IDENTIFIER>
    {
        jjtn000.setNamespace (t.image);
    }
    )?
    
    t=<SERVICE>
    {
    	try {
	    	jjtn000.setDocumentation(t.specialToken.image.replaceFirst("#*", "").trim() );
	    }catch(Exception e){}
    }
    t=<IDENTIFIER> <LBRACE> (typesDecl())? (portDecl())+ <RBRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName (t.image);
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void typesDecl() :
{/*@bgen(jjtree) typesDecl */
  ASTtypesDecl jjtn000 = new ASTtypesDecl(this, JJTTYPESDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) typesDecl */
    try {
/*@egen*/
    <TYPES> schemaDecl()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void schemaDecl() :
{/*@bgen(jjtree) schemaDecl */
  ASTschemaDecl jjtn000 = new ASTschemaDecl(this, JJTSCHEMADECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) schemaDecl */
    try {
/*@egen*/
    <LBRACE> rnc()/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

JAVACODE
void rnc() {/*@bgen(jjtree) rnc */
 ASTrnc jjtn000 = new ASTrnc(this, JJTRNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/
    int nesting = 1;
    while (true) {
        char ch;
        try {
            ch = jj_input_stream.readChar();
        } catch (Exception ioe) {
            System.err.println (ioe);
            return;
        }

        if (ch == '{') {
            nesting++;
        } else if (ch == '}') {
            nesting--;
            if (nesting == 0) break;
        }
    }
    String s = jj_input_stream.GetImage();
    s = s.substring (1, s.length() - 1);
    jjtn000.setRnc (s);

    rncBuffer.append (s);/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void portDecl() :
{/*@bgen(jjtree) portDecl */
    ASTportDecl jjtn000 = new ASTportDecl(this, JJTPORTDECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t = null;
}
{/*@bgen(jjtree) portDecl */
    try {
/*@egen*/
    <PORT> (t=<IDENTIFIER>)? <LBRACE> (operationDecl())* <RBRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        if (t != null) {
            jjtn000.setName (t.image);
        } 
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void operationDecl() :
{/*@bgen(jjtree) operationDecl */
    ASToperationDecl jjtn000 = new ASToperationDecl(this, JJTOPERATIONDECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) operationDecl */
    try {
/*@egen*/
    t=<OPERATION> 
    {
    	try {
	    	jjtn000.setDocumentation(t.specialToken.image.replaceFirst("#*", "").trim() );
	    }catch(Exception e){}
    }
    t=<IDENTIFIER> <LBRACE> (inDecl())? (outDecl())? (faultDecl())? <RBRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName (t.image);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void inDecl()            :
{/*@bgen(jjtree) MessageDef */
    ASTMessageDef jjtn000 = new ASTMessageDef(this, JJTMESSAGEDEF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t = null;
}
{/*@bgen(jjtree) MessageDef */
    try {
/*@egen*/
    <IN> (t=<IDENTIFIER>)? schemaDecl()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        if (t != null) {
            jjtn000.setName (t.image);
        }
        jjtn000.setType (ASTMessageDef.MessageType.In);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void outDecl()            :
{/*@bgen(jjtree) MessageDef */
    ASTMessageDef jjtn000 = new ASTMessageDef(this, JJTMESSAGEDEF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t = null;
}
{/*@bgen(jjtree) MessageDef */
    try {
/*@egen*/
    <OUT> (t=<IDENTIFIER>)? schemaDecl()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        if (t != null) {
            jjtn000.setName (t.image);
        }
        jjtn000.setType (ASTMessageDef.MessageType.Out);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void faultDecl()            : 
{/*@bgen(jjtree) MessageDef */
    ASTMessageDef jjtn000 = new ASTMessageDef(this, JJTMESSAGEDEF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t = null;
}
{/*@bgen(jjtree) MessageDef */
    try {
/*@egen*/
    <FAULT> (t=<IDENTIFIER>)? schemaDecl()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        if (t != null) {
            jjtn000.setName (t.image);
        }
        jjtn000.setType (ASTMessageDef.MessageType.Fault);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}





