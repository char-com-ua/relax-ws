/* Generated By:JJTree&JavaCC: Do not edit this line. RelaxWizParser.java */
package com.google.code.p.relaxws.parser;

import java.io.*;
import java.util.*;

public class RelaxWizParser/*@bgen(jjtree)*/implements RelaxWizParserTreeConstants, RelaxWizParserConstants {/*@bgen(jjtree)*/
  protected JJTRelaxWizParserState jjtree = new JJTRelaxWizParserState();
    private StringBuffer rncBuffer = new StringBuffer ();

    public static void main (String[] args) throws ParseException, IOException {
        if (args.length == 0) {
            System.out.println ("Usage:  RelaxWizParser inputfile");
            System.exit (1);
        }


        BufferedReader rdr = new BufferedReader (new FileReader (args[0]));
        RelaxWizParser p = new RelaxWizParser (rdr);
        ASTservice tree = p.service ();
        tree.dump ("\t");
    }

    public String getAllRnc() {
        return rncBuffer.toString();
    }

  final public ASTservice service() throws ParseException {
 /*@bgen(jjtree) service */
    ASTservice jjtn000 = new ASTservice(this, JJTSERVICE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAMESPACE:
        jj_consume_token(NAMESPACE);
        t = jj_consume_token(IDENTIFIER);
        jjtn000.setNamespace (t.image);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(SERVICE);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPES:
        typesDecl();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        portDecl();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PORT:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setName (t.image);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void typesDecl() throws ParseException {
 /*@bgen(jjtree) typesDecl */
  ASTtypesDecl jjtn000 = new ASTtypesDecl(this, JJTTYPESDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TYPES);
      schemaDecl();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void schemaDecl() throws ParseException {
 /*@bgen(jjtree) schemaDecl */
  ASTschemaDecl jjtn000 = new ASTschemaDecl(this, JJTSCHEMADECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      rnc();
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  void rnc() throws ParseException {
            /*@bgen(jjtree) rnc */
 ASTrnc jjtn000 = new ASTrnc(this, JJTRNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {int nesting = 1;
    while (true) {
        char ch;
        try {
            ch = jj_input_stream.readChar();
        } catch (Exception ioe) {
            System.err.println (ioe);
            return;
        }

        if (ch == '{') {
            nesting++;
        } else if (ch == '}') {
            nesting--;
            if (nesting == 0) break;
        }
    }
    String s = jj_input_stream.GetImage();
    s = s.substring (1, s.length() - 1);
    jjtn000.setRnc (s);

    rncBuffer.append (s);/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  final public void portDecl() throws ParseException {
 /*@bgen(jjtree) portDecl */
    ASTportDecl jjtn000 = new ASTportDecl(this, JJTPORTDECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(PORT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPERATION:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        operationDecl();
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        if (t != null) {
            jjtn000.setName (t.image);
        }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void operationDecl() throws ParseException {
 /*@bgen(jjtree) operationDecl */
    ASToperationDecl jjtn000 = new ASToperationDecl(this, JJTOPERATIONDECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(OPERATION);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        inDecl();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUT:
        outDecl();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FAULT:
        faultDecl();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setName (t.image);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void inDecl() throws ParseException {
 /*@bgen(jjtree) MessageDef */
    ASTMessageDef jjtn000 = new ASTMessageDef(this, JJTMESSAGEDEF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(IN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      schemaDecl();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        if (t != null) {
            jjtn000.setName (t.image);
        }
        jjtn000.setType (ASTMessageDef.MessageType.In);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void outDecl() throws ParseException {
 /*@bgen(jjtree) MessageDef */
    ASTMessageDef jjtn000 = new ASTMessageDef(this, JJTMESSAGEDEF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(OUT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      schemaDecl();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        if (t != null) {
            jjtn000.setName (t.image);
        }
        jjtn000.setType (ASTMessageDef.MessageType.Out);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void faultDecl() throws ParseException {
 /*@bgen(jjtree) MessageDef */
    ASTMessageDef jjtn000 = new ASTMessageDef(this, JJTMESSAGEDEF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(FAULT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      schemaDecl();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        if (t != null) {
            jjtn000.setName (t.image);
        }
        jjtn000.setType (ASTMessageDef.MessageType.Fault);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  /** Generated Token Manager. */
  public RelaxWizParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x2000,0x100,0x10000,0x200,0x400,0x800,0x1000,0x10000,0x10000,0x10000,};
   }

  /** Constructor with InputStream. */
  public RelaxWizParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RelaxWizParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RelaxWizParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RelaxWizParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RelaxWizParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RelaxWizParser(RelaxWizParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RelaxWizParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
